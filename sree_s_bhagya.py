# -*- coding: utf-8 -*-
"""Sree_S_Bhagya.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/14wfXJFHohrDhT9zXSzOKPgtACy3AFjCV

# 1. Folders with photos of two personalities
# 2. Save the files as folders in ur google Drive.
# 3. Mount them in Colab
"""

from google.colab import drive
drive.mount('/content/drive')

import numpy as np
import matplotlib.pyplot as plt
import pathlib

import os

root_dir='/content/drive/MyDrive/Syllabus_CourseStudyMaterials/DL/Assignment3/Dataset'

import shutil
from shutil import copyfile,rmtree

shutil.rmtree('/content/drive/MyDrive/Syllabus_CourseStudyMaterials/DL/Assignment3/Dataset/training')
shutil.rmtree('/content/drive/MyDrive/Syllabus_CourseStudyMaterials/DL/Assignment3/Dataset/testing')

chitra_dir=os.path.join('/content/drive/MyDrive/Syllabus_CourseStudyMaterials/DL/Assignment3/Dataset/chitra/')
len(os.listdir(chitra_dir))

my_dir = chitra_dir
for fname in os.listdir(my_dir):
    if fname.startswith("aug_"):
        os.remove(os.path.join(my_dir, fname))

len(os.listdir(chitra_dir))

shreya_dir=os.path.join('/content/drive/MyDrive/Syllabus_CourseStudyMaterials/DL/Assignment3/Dataset/shreya/')
len(os.listdir(shreya_dir))

my_dir = shreya_dir
for fname in os.listdir(my_dir):
    if fname.startswith("aug_"):
        os.remove(os.path.join(my_dir, fname))

len(os.listdir(shreya_dir))

chitra_fnames = os.listdir( chitra_dir )
shreya_fnames = os.listdir( shreya_dir )

chitra_fnames

# Commented out IPython magic to ensure Python compatibility.
# %matplotlib inline

import matplotlib.image as mpimg
import matplotlib.pyplot as plt

# Parameters for our graph; we'll output images in a 4x4 configuration
nrows = 4
ncols = 4

pic_index = 0 # Index for iterating over images

# Set up matplotlib fig, and size it to fit 4x4 pics
fig = plt.gcf()
fig.set_size_inches(ncols*4, nrows*4)

pic_index+=8

next_1_pix = [os.path.join(chitra_dir, fname) 
                for fname in chitra_fnames[ pic_index-8:pic_index] 
               ]

next_2_pix = [os.path.join(shreya_dir, fname) 
                for fname in shreya_fnames[ pic_index-8:pic_index]
               ]

for i, img_path in enumerate(next_1_pix+next_2_pix):
  # Set up subplot; subplot indices start at 1
  sp = plt.subplot(nrows, ncols, i + 1)
  sp.axis('Off') # Don't show axes (or gridlines)

  img = mpimg.imread(img_path)
  plt.imshow(img)

plt.show()

from keras.preprocessing.image import ImageDataGenerator
from skimage import io
datagen = ImageDataGenerator(        
        rotation_range = 40,
        shear_range = 0.2,
        zoom_range = 0.2,
        horizontal_flip = True,
        brightness_range = (0.5, 1.5))

"""# **4. Data augmentation **"""

import numpy as np
import os
from PIL import Image
image_directory = chitra_dir
SIZE = 224
dataset = []
my_images = os.listdir(image_directory)

for i, image_name in enumerate(my_images):    
    if (image_name.split('.')[1] == 'jpg'):        
        image = io.imread(image_directory+'/' + image_name)        
        image = Image.fromarray(image, 'RGB')        
        image = image.resize((SIZE,SIZE)) 
        dataset.append(np.array(image))
x = np.array(dataset)
i = 0
for batch in datagen.flow(x, batch_size=16,
                          save_to_dir= chitra_dir,
                          save_prefix='aug',
                          save_format='jpg'):    
    i += 1    
    if i > 7:        
        break

len(os.listdir(chitra_dir))

image_directory = shreya_dir
my_images = os.listdir(image_directory)
dataset = []
for i, image_name in enumerate(my_images):    
    if (image_name.split('.')[1] == 'jpg'):        
        image = io.imread(image_directory+'/' + image_name)        
        image = Image.fromarray(image, 'RGB')        
        image = image.resize((SIZE,SIZE)) 
        dataset.append(np.array(image))
x = np.array(dataset)
i = 0
for batch in datagen.flow(x, batch_size=16,
                          save_to_dir= shreya_dir,
                          save_prefix='aug',
                          save_format='jpg'):    
    i += 1    
    if i > 8:        
        break

len(os.listdir(shreya_dir))

classes = ['chitra', 'shreya']

allFileNames = os.listdir(chitra_dir)
#allFileNames

training_dir_path='/content/drive/MyDrive/Syllabus_CourseStudyMaterials/DL/Assignment3/Dataset/training/'
testing_dir_path='/content/drive/MyDrive/Syllabus_CourseStudyMaterials/DL/Assignment3/Dataset/testing/'
validation_dir_path='/content/drive/MyDrive/Syllabus_CourseStudyMaterials/DL/Assignment3/Dataset/validation/'
TRAINING_DIR='/content/drive/MyDrive/Syllabus_CourseStudyMaterials/DL/Assignment3/Dataset/training/'
TESTING_DIR='/content/drive/MyDrive/Syllabus_CourseStudyMaterials/DL/Assignment3/Dataset/testing/'
training_chitra_path='/content/drive/MyDrive/Syllabus_CourseStudyMaterials/DL/Assignment3/Dataset/training/chitra'
testing_chitra_path='/content/drive/MyDrive/Syllabus_CourseStudyMaterials/DL/Assignment3/Dataset/testing/chitra'
training_shreya_path='/content/drive/MyDrive/Syllabus_CourseStudyMaterials/DL/Assignment3/Dataset/training/shreya'
testing_shreya_path='/content/drive/MyDrive/Syllabus_CourseStudyMaterials/DL/Assignment3/Dataset/testing/shreya'
validation_chitra_path='/content/drive/MyDrive/Syllabus_CourseStudyMaterials/DL/Assignment3/Dataset/validation/chitra'
validation_shreya_path='/content/drive/MyDrive/Syllabus_CourseStudyMaterials/DL/Assignment3/Dataset/validation/shreya'

# for train_dir_path in training_dir_path:
#     try:
#         os.mkdir(train_dir_path)
#         os.mkdir(train_dir_path+chitra)
#         os.mkdir(train_dir_path+shreya)
#     except OSError:
#         pass

# for test_dir_path in testing_dir_path:
#     try:
#         os.mkdir(test_dir_path)
#     except OSError:

#         pass

try:
    os.mkdir('/content/drive/MyDrive/Syllabus_CourseStudyMaterials/DL/Assignment3/Dataset/training')
    os.mkdir('/content/drive/MyDrive/Syllabus_CourseStudyMaterials/DL/Assignment3/Dataset/testing')
    os.mkdir('/content/drive/MyDrive/Syllabus_CourseStudyMaterials/DL/Assignment3/Dataset/training/chitra')
    os.mkdir('/content/drive/MyDrive/Syllabus_CourseStudyMaterials/DL/Assignment3/Dataset/training/shreya')   
except OSError:
    pass

import random
import glob
import cv2
import numpy as np
from os import path
from PIL import Image
import csv

import pandas as pd
train_df = pd.DataFrame(columns=['filename','class'])
train_df
test_df = pd.DataFrame(columns=['filename','class'])
test_df
df=pd.DataFrame(columns=['filename','class'])

from PIL import Image

"""# **5. Train-Test Split
# Use 80% for train and rest for test.**
"""

def split_data(SOURCE, TRAINING, TESTING, SPLIT_SIZE):
  files = []
  
  for filename in os.listdir(SOURCE):
       file = SOURCE + filename
       if os.path.getsize(file) > 0:
           files.append(filename)
       else:
           print(filename + " is zero length, so ignoring.")

  training_length = int(len(files) * SPLIT_SIZE)
  testing_length = int(len(files) - training_length)
  shuffled_set = random.sample(files, len(files))
  training_set = shuffled_set[0:training_length]
  print(len(training_set))
  testing_set = shuffled_set[-testing_length:]
  print(len(testing_set)) 

  try: 
    i=0   
    for filename in training_set:
      if(SOURCE==chitra_dir):
        train_cls='chitra'
      else:
        train_cls='shreya'
      #print(filename)
      this_file = SOURCE + filename
      filename=train_cls+'_'+filename
      if(train_cls=='chitra'):
        destination = training_chitra_path +'/'+ filename
      else:
        destination = training_shreya_path +'/'+ filename
      copyfile(this_file, destination)
      train_df.loc[i] = [destination,train_cls]
      df.loc[i] = [destination,train_cls]
      i+=1
      j=i
      
  except OSError:
   pass


  # df2 = pd.DataFrame({'filename':[filename],'class':[train_cls]})
  # train_df=pd.concat([train_df, df2], ignore_index = True, axis = 0)
  
  print("Training set copied")
  try:
    i=0
    for filename in testing_set:
      print(filename)
      if(SOURCE==chitra_dir):
        test_cls='chitra'
      else:
        test_cls='shreya'
      #print(filename)
      this_file = SOURCE + filename
      filename=test_cls+'_'+filename
      destination = TESTING+filename
      copyfile(this_file, destination)
      test_df.loc[i] = [destination,test_cls]
      df.loc[j] = [destination,train_cls]
      i+=1
      j+=1
      
      # df2 = pd.DataFrame({'filename':[filename],'class':[test_cls]})
      # train_df=pd.concat([train_df, df2], ignore_index = True, axis = 0)
    
  except OSError:
   pass
  print("Testing set copied")
    
  
split_size = .8
split_data(chitra_dir, TRAINING_DIR, TESTING_DIR, split_size)
split_data(shreya_dir, TRAINING_DIR, TESTING_DIR, split_size)

PATH = '/content/drive/MyDrive/Syllabus_CourseStudyMaterials/DL/Assignment3/Dataset'

train_dir = os.path.join(PATH, 'training')
validation_dir = os.path.join(PATH, 'validation')
test_dir = os.path.join(PATH, 'testing')

# Get number of files in each directory. The train and validation directories
# each have the subdirecories "dogs" and "cats".
total_train = sum([len(files) for r, d, files in os.walk(train_dir)])
total_test = len(os.listdir(test_dir))

# Variables for pre-processing and training.
batch_size = 128
epochs = 10
IMG_HEIGHT = 224
IMG_WIDTH = 224

# create test subdirectory
test_subdir = os.path.join(test_dir, 'chitra_and_shreya')

if not os.path.exists(test_subdir):
  os.mkdir(test_subdir)

# move test images into test subdirectory so that the flow_from_directory method can find them
for filename in os.listdir(test_dir):
  if not '.' in filename:
    continue
  old_path_name = os.path.join(test_dir, filename)
  new_path_name = os.path.join(test_subdir, filename)
  if not os.path.exists(new_path_name):
    os.rename(old_path_name, new_path_name)

train_image_generator = ImageDataGenerator(rescale=1./255)
validation_image_generator = ImageDataGenerator(rescale=1./255)
test_image_generator = ImageDataGenerator(rescale=1./255)

train_data_gen = train_image_generator.flow_from_directory(train_dir, target_size=(IMG_HEIGHT, IMG_WIDTH), class_mode='binary', batch_size=batch_size)
val_data_gen = validation_image_generator.flow_from_directory(validation_dir, target_size=(IMG_HEIGHT, IMG_WIDTH), class_mode='binary', batch_size=batch_size)
test_data_gen = test_image_generator.flow_from_directory(test_dir, target_size=(IMG_HEIGHT, IMG_WIDTH), class_mode='binary', batch_size=batch_size, shuffle=False)

train_image_generator = ImageDataGenerator(rescale=1./255)

train_data_gen = train_image_generator.flow_from_directory(batch_size=batch_size, directory=train_dir, target_size=(IMG_HEIGHT, IMG_WIDTH), class_mode='binary')

"""# ** 6.1. Design CNN model**"""

from keras.models import Sequential
from keras.layers.convolutional import Conv2D,MaxPooling2D
from keras.layers import Dense, Dropout, Flatten

model = Sequential([
  Conv2D(16, (3, 3), activation='relu', input_shape=(IMG_HEIGHT, IMG_WIDTH, 3)),
  MaxPooling2D(2, 2),
  Conv2D(32, (3, 3), activation='relu'),
  MaxPooling2D(2, 2),
  Conv2D(64, (3, 3), activation='relu'),
  MaxPooling2D(2, 2),
  Conv2D(64, (3, 3), activation='relu'),
  MaxPooling2D(2,2),
  Flatten(),
  Dropout(0.5),
  Dense(512, activation='relu'),
  Dense(1, activation='sigmoid')
])

model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])

model.summary()

history = model.fit(x=train_data_gen,epochs=epochs, validation_data=val_data_gen, verbose=2)

"""# ***6.2. Plot Training acc, Training loss, validation acc, validation loss***"""

acc = history.history['accuracy']
val_acc = history.history['val_accuracy']

loss = history.history['loss']
val_loss = history.history['val_loss']

epochs_range = range(epochs)

plt.figure(figsize=(20, 10))
plt.subplot(1, 2, 1)
plt.plot(epochs_range, acc, label='Training Accuracy')
plt.plot(epochs_range, val_acc, label='Validation Accuracy')
plt.legend(loc='lower right')
plt.title('Training and Validation Accuracy')

plt.subplot(1, 2, 2)
plt.plot(epochs_range, loss, label='Training Loss')
plt.plot(epochs_range, val_loss, label='Validation Loss')
plt.legend(loc='upper right')
plt.title('Training and Validation Loss')
plt.show()

"""**7. From graph it can be state that there is no overfitting in the  model**

# **8. Predict class of an image**
"""

array_probabilities = model.predict(test_data_gen)
probabilities = [i[0] for i in array_probabilities]

def plotImage(images_arr, probabilities = False):
    fig, axes = plt.subplots(len(images_arr), 1, figsize=(5,len(images_arr) * 3))
    if probabilities is False:
          axes.imshow(img)
          axes.axis('off')
    else:
          axes.imshow(img)
          axes.axis('off')
          if probabilities > 0.5:
              axes.set_title("%.2f" % (probabilities*100) + "% shreya")
          else:
              axes.set_title("%.2f" % ((1-probabilities)*100) + "% chitra")
    plt.show()

x=model.predict(test_data_gen)[25]
y=x[0]
if y > 0.5:
              print(" shreya")
              print("prob=",y*100)
else:
              print("chitra",((1-y)*100))

plotImage(x, probabilities=y)

"""## **`9. Changing Optimizer to SGD`**"""

model.compile(optimizer='SGD', loss='binary_crossentropy', metrics=['accuracy'])

history = model.fit(x=train_data_gen,epochs=epochs, validation_data=val_data_gen, verbose=2)

acc = history.history['accuracy']
val_acc = history.history['val_accuracy']

loss = history.history['loss']
val_loss = history.history['val_loss']

epochs_range = range(epochs)

plt.figure(figsize=(20, 10))
plt.subplot(1, 2, 1)
plt.plot(epochs_range, acc, label='Training Accuracy')
plt.plot(epochs_range, val_acc, label='Validation Accuracy')
plt.legend(loc='lower right')
plt.title('Training and Validation Accuracy')

plt.subplot(1, 2, 2)
plt.plot(epochs_range, loss, label='Training Loss')
plt.plot(epochs_range, val_loss, label='Validation Loss')
plt.legend(loc='upper right')
plt.title('Training and Validation Loss')
plt.show()

array_probabilities = model.predict(test_data_gen)
probabilities = [i[0] for i in array_probabilities]

x=model.predict(test_data_gen)[25]
y=x[0]
if y > 0.5:
              print(" shreya")
              print("prob=",y*100)
else:
              print("chitra",((1-y)*100))

plotImage(x, probabilities=y)